#ifndef SIMPLE_INTERACTIVE_CODES_H
#define SIMPLE_INTERACTIVE_CODES_H
#include <SDL2/SDL.h>

namespace simple::interactive
{

	enum class keycode : SDL_Keycode
	{
		_0 = SDLK_0,
		_1 = SDLK_1,
		_2 = SDLK_2,
		_3 = SDLK_3,
		_4 = SDLK_4,
		_5 = SDLK_5,
		_6 = SDLK_6,
		_7 = SDLK_7,
		_8 = SDLK_8,
		_9 = SDLK_9,
		a = SDLK_a,
		ac_back = SDLK_AC_BACK,
		ac_bookmarks = SDLK_AC_BOOKMARKS,
		ac_forward = SDLK_AC_FORWARD,
		ac_home = SDLK_AC_HOME,
		ac_refresh = SDLK_AC_REFRESH,
		ac_search = SDLK_AC_SEARCH,
		ac_stop = SDLK_AC_STOP,
		again = SDLK_AGAIN,
		alterase = SDLK_ALTERASE,
		ampersand = SDLK_AMPERSAND,
		application = SDLK_APPLICATION,
		asterisk = SDLK_ASTERISK,
		at = SDLK_AT,
		audiomute = SDLK_AUDIOMUTE,
		audionext = SDLK_AUDIONEXT,
		audioplay = SDLK_AUDIOPLAY,
		audioprev = SDLK_AUDIOPREV,
		audiostop = SDLK_AUDIOSTOP,
		b = SDLK_b,
		backquote = SDLK_BACKQUOTE,
		backslash = SDLK_BACKSLASH,
		backspace = SDLK_BACKSPACE,
		brightnessdown = SDLK_BRIGHTNESSDOWN,
		brightnessup = SDLK_BRIGHTNESSUP,
		c = SDLK_c,
		calculator = SDLK_CALCULATOR,
		cancel = SDLK_CANCEL,
		capslock = SDLK_CAPSLOCK,
		caret = SDLK_CARET,
		clear = SDLK_CLEAR,
		clearagain = SDLK_CLEARAGAIN,
		colon = SDLK_COLON,
		comma = SDLK_COMMA,
		computer = SDLK_COMPUTER,
		copy = SDLK_COPY,
		crsel = SDLK_CRSEL,
		currencysubunit = SDLK_CURRENCYSUBUNIT,
		currencyunit = SDLK_CURRENCYUNIT,
		cut = SDLK_CUT,
		d = SDLK_d,
		decimalseparator = SDLK_DECIMALSEPARATOR,
		del = SDLK_DELETE,
		displayswitch = SDLK_DISPLAYSWITCH,
		dollar = SDLK_DOLLAR,
		down = SDLK_DOWN,
		e = SDLK_e,
		eject = SDLK_EJECT,
		end = SDLK_END,
		equals = SDLK_EQUALS,
		escape = SDLK_ESCAPE,
		exclaim = SDLK_EXCLAIM,
		execute = SDLK_EXECUTE,
		exsel = SDLK_EXSEL,
		f = SDLK_f,
		f1 = SDLK_F1,
		f10 = SDLK_F10,
		f11 = SDLK_F11,
		f12 = SDLK_F12,
		f13 = SDLK_F13,
		f14 = SDLK_F14,
		f15 = SDLK_F15,
		f16 = SDLK_F16,
		f17 = SDLK_F17,
		f18 = SDLK_F18,
		f19 = SDLK_F19,
		f2 = SDLK_F2,
		f20 = SDLK_F20,
		f21 = SDLK_F21,
		f22 = SDLK_F22,
		f23 = SDLK_F23,
		f24 = SDLK_F24,
		f3 = SDLK_F3,
		f4 = SDLK_F4,
		f5 = SDLK_F5,
		f6 = SDLK_F6,
		f7 = SDLK_F7,
		f8 = SDLK_F8,
		f9 = SDLK_F9,
		find = SDLK_FIND,
		g = SDLK_g,
		greater = SDLK_GREATER,
		h = SDLK_h,
		hash = SDLK_HASH,
		help = SDLK_HELP,
		SDLK_HOME,
		i = SDLK_i,
		insert = SDLK_INSERT,
		j = SDLK_j,
		k = SDLK_k,
		kbdillumdown = SDLK_KBDILLUMDOWN,
		kbdillumtoggle = SDLK_KBDILLUMTOGGLE,
		kbdillumup = SDLK_KBDILLUMUP,
		kp_0 = SDLK_KP_0,
		kp_00 = SDLK_KP_00,
		kp_000 = SDLK_KP_000,
		kp_1 = SDLK_KP_1,
		kp_2 = SDLK_KP_2,
		kp_3 = SDLK_KP_3,
		kp_4 = SDLK_KP_4,
		kp_5 = SDLK_KP_5,
		kp_6 = SDLK_KP_6,
		kp_7 = SDLK_KP_7,
		kp_8 = SDLK_KP_8,
		kp_9 = SDLK_KP_9,
		kp_a = SDLK_KP_A,
		kp_ampersand = SDLK_KP_AMPERSAND,
		kp_at = SDLK_KP_AT,
		kp_b = SDLK_KP_B,
		kp_backspace = SDLK_KP_BACKSPACE,
		kp_binary = SDLK_KP_BINARY,
		kp_c = SDLK_KP_C,
		kp_clear = SDLK_KP_CLEAR,
		kp_clearentry = SDLK_KP_CLEARENTRY,
		kp_colon = SDLK_KP_COLON,
		kp_comma = SDLK_KP_COMMA,
		kp_d = SDLK_KP_D,
		kp_dblampersand = SDLK_KP_DBLAMPERSAND,
		kp_dblverticalbar = SDLK_KP_DBLVERTICALBAR,
		kp_decimal = SDLK_KP_DECIMAL,
		kp_divide = SDLK_KP_DIVIDE,
		kp_e = SDLK_KP_E,
		kp_enter = SDLK_KP_ENTER,
		kp_equals = SDLK_KP_EQUALS,
		kp_equalsas400 = SDLK_KP_EQUALSAS400,
		kp_exclam = SDLK_KP_EXCLAM,
		kp_f = SDLK_KP_F,
		kp_greater = SDLK_KP_GREATER,
		kp_hash = SDLK_KP_HASH,
		kp_hexadecimal = SDLK_KP_HEXADECIMAL,
		kp_leftbrace = SDLK_KP_LEFTBRACE,
		kp_leftparen = SDLK_KP_LEFTPAREN,
		kp_less = SDLK_KP_LESS,
		kp_memadd = SDLK_KP_MEMADD,
		kp_memclear = SDLK_KP_MEMCLEAR,
		kp_memdivide = SDLK_KP_MEMDIVIDE,
		kp_memmultiply = SDLK_KP_MEMMULTIPLY,
		kp_memrecall = SDLK_KP_MEMRECALL,
		kp_memstore = SDLK_KP_MEMSTORE,
		kp_memsubtract = SDLK_KP_MEMSUBTRACT,
		kp_minus = SDLK_KP_MINUS,
		kp_multiply = SDLK_KP_MULTIPLY,
		kp_octal = SDLK_KP_OCTAL,
		kp_percent = SDLK_KP_PERCENT,
		kp_period = SDLK_KP_PERIOD,
		kp_plus = SDLK_KP_PLUS,
		kp_plusminus = SDLK_KP_PLUSMINUS,
		kp_power = SDLK_KP_POWER,
		kp_rightbrace = SDLK_KP_RIGHTBRACE,
		kp_rightparen = SDLK_KP_RIGHTPAREN,
		kp_space = SDLK_KP_SPACE,
		kp_tab = SDLK_KP_TAB,
		kp_verticalbar = SDLK_KP_VERTICALBAR,
		kp_xor = SDLK_KP_XOR,
		l = SDLK_l,
		lalt = SDLK_LALT,
		lctrl = SDLK_LCTRL,
		left = SDLK_LEFT,
		leftbracket = SDLK_LEFTBRACKET,
		leftparen = SDLK_LEFTPAREN,
		less = SDLK_LESS,
		lgui = SDLK_LGUI,
		lshift = SDLK_LSHIFT,
		m = SDLK_m,
		mail = SDLK_MAIL,
		mediaselect = SDLK_MEDIASELECT,
		menu = SDLK_MENU,
		minus = SDLK_MINUS,
		mode = SDLK_MODE,
		mute = SDLK_MUTE,
		n = SDLK_n,
		numlockclear = SDLK_NUMLOCKCLEAR,
		o = SDLK_o,
		oper = SDLK_OPER,
		out = SDLK_OUT,
		p = SDLK_p,
		pagedown = SDLK_PAGEDOWN,
		pageup = SDLK_PAGEUP,
		paste = SDLK_PASTE,
		pause = SDLK_PAUSE,
		percent = SDLK_PERCENT,
		period = SDLK_PERIOD,
		plus = SDLK_PLUS,
		power = SDLK_POWER,
		printscreen = SDLK_PRINTSCREEN,
		prior = SDLK_PRIOR,
		q = SDLK_q,
		question = SDLK_QUESTION,
		quote = SDLK_QUOTE,
		quotedbl = SDLK_QUOTEDBL,
		r = SDLK_r,
		ralt = SDLK_RALT,
		rctrl = SDLK_RCTRL,
		enter = SDLK_RETURN,
		return2 = SDLK_RETURN2,
		rgui = SDLK_RGUI,
		right = SDLK_RIGHT,
		rightbracket = SDLK_RIGHTBRACKET,
		rightparen = SDLK_RIGHTPAREN,
		rshift = SDLK_RSHIFT,
		s = SDLK_s,
		scrolllock = SDLK_SCROLLLOCK,
		select = SDLK_SELECT,
		semicolon = SDLK_SEMICOLON,
		separator = SDLK_SEPARATOR,
		slash = SDLK_SLASH,
		sleep = SDLK_SLEEP,
		space = SDLK_SPACE,
		stop = SDLK_STOP,
		sysreq = SDLK_SYSREQ,
		t = SDLK_t,
		tab = SDLK_TAB,
		thousandsseparator = SDLK_THOUSANDSSEPARATOR,
		u = SDLK_u,
		underscore = SDLK_UNDERSCORE,
		undo = SDLK_UNDO,
		unknown = SDLK_UNKNOWN,
		up = SDLK_UP,
		v = SDLK_v,
		volumedown = SDLK_VOLUMEDOWN,
		volumeup = SDLK_VOLUMEUP,
		w = SDLK_w,
		www = SDLK_WWW,
		x = SDLK_x,
		y = SDLK_y,
		z = SDLK_z,
	};

	enum class scancode : std::underlying_type_t<SDL_Scancode>
	{
		_0 = SDL_SCANCODE_0,
		_1 = SDL_SCANCODE_1,
		_2 = SDL_SCANCODE_2,
		_3 = SDL_SCANCODE_3,
		_4 = SDL_SCANCODE_4,
		_5 = SDL_SCANCODE_5,
		_6 = SDL_SCANCODE_6,
		_7 = SDL_SCANCODE_7,
		_8 = SDL_SCANCODE_8,
		_9 = SDL_SCANCODE_9,
		a = SDL_SCANCODE_A,
		ac_back = SDL_SCANCODE_AC_BACK,
		ac_bookmarks = SDL_SCANCODE_AC_BOOKMARKS,
		ac_forward = SDL_SCANCODE_AC_FORWARD,
		ac_home = SDL_SCANCODE_AC_HOME,
		ac_refresh = SDL_SCANCODE_AC_REFRESH,
		ac_search = SDL_SCANCODE_AC_SEARCH,
		ac_stop = SDL_SCANCODE_AC_STOP,
		again = SDL_SCANCODE_AGAIN,
		alterase = SDL_SCANCODE_ALTERASE,
		apostrophe = SDL_SCANCODE_APOSTROPHE,
		application = SDL_SCANCODE_APPLICATION,
		audiomute = SDL_SCANCODE_AUDIOMUTE,
		audionext = SDL_SCANCODE_AUDIONEXT,
		audioplay = SDL_SCANCODE_AUDIOPLAY,
		audioprev = SDL_SCANCODE_AUDIOPREV,
		audiostop = SDL_SCANCODE_AUDIOSTOP,
		b = SDL_SCANCODE_B,
		backslash = SDL_SCANCODE_BACKSLASH,
		backspace = SDL_SCANCODE_BACKSPACE,
		brightnessdown = SDL_SCANCODE_BRIGHTNESSDOWN,
		brightnessup = SDL_SCANCODE_BRIGHTNESSUP,
		c = SDL_SCANCODE_C,
		calculator = SDL_SCANCODE_CALCULATOR,
		cancel = SDL_SCANCODE_CANCEL,
		capslock = SDL_SCANCODE_CAPSLOCK,
		clear = SDL_SCANCODE_CLEAR,
		clearagain = SDL_SCANCODE_CLEARAGAIN,
		comma = SDL_SCANCODE_COMMA,
		computer = SDL_SCANCODE_COMPUTER,
		copy = SDL_SCANCODE_COPY,
		crsel = SDL_SCANCODE_CRSEL,
		currencysubunit = SDL_SCANCODE_CURRENCYSUBUNIT,
		currencyunit = SDL_SCANCODE_CURRENCYUNIT,
		cut = SDL_SCANCODE_CUT,
		d = SDL_SCANCODE_D,
		decimalseparator = SDL_SCANCODE_DECIMALSEPARATOR,
		del = SDL_SCANCODE_DELETE,
		displayswitch = SDL_SCANCODE_DISPLAYSWITCH,
		down = SDL_SCANCODE_DOWN,
		e = SDL_SCANCODE_E,
		eject = SDL_SCANCODE_EJECT,
		end = SDL_SCANCODE_END,
		equals = SDL_SCANCODE_EQUALS,
		escape = SDL_SCANCODE_ESCAPE,
		execute = SDL_SCANCODE_EXECUTE,
		exsel = SDL_SCANCODE_EXSEL,
		f = SDL_SCANCODE_F,
		f1 = SDL_SCANCODE_F1,
		f10 = SDL_SCANCODE_F10,
		f11 = SDL_SCANCODE_F11,
		f12 = SDL_SCANCODE_F12,
		f13 = SDL_SCANCODE_F13,
		f14 = SDL_SCANCODE_F14,
		f15 = SDL_SCANCODE_F15,
		f16 = SDL_SCANCODE_F16,
		f17 = SDL_SCANCODE_F17,
		f18 = SDL_SCANCODE_F18,
		f19 = SDL_SCANCODE_F19,
		f2 = SDL_SCANCODE_F2,
		f20 = SDL_SCANCODE_F20,
		f21 = SDL_SCANCODE_F21,
		f22 = SDL_SCANCODE_F22,
		f23 = SDL_SCANCODE_F23,
		f24 = SDL_SCANCODE_F24,
		f3 = SDL_SCANCODE_F3,
		f4 = SDL_SCANCODE_F4,
		f5 = SDL_SCANCODE_F5,
		f6 = SDL_SCANCODE_F6,
		f7 = SDL_SCANCODE_F7,
		f8 = SDL_SCANCODE_F8,
		f9 = SDL_SCANCODE_F9,
		find = SDL_SCANCODE_FIND,
		g = SDL_SCANCODE_G,
		grave = SDL_SCANCODE_GRAVE,
		h = SDL_SCANCODE_H,
		help = SDL_SCANCODE_HELP,
		home = SDL_SCANCODE_HOME,
		i = SDL_SCANCODE_I,
		insert = SDL_SCANCODE_INSERT,
		international1 = SDL_SCANCODE_INTERNATIONAL1,
		international2 = SDL_SCANCODE_INTERNATIONAL2,
		international3 = SDL_SCANCODE_INTERNATIONAL3,
		international4 = SDL_SCANCODE_INTERNATIONAL4,
		international5 = SDL_SCANCODE_INTERNATIONAL5,
		international6 = SDL_SCANCODE_INTERNATIONAL6,
		international7 = SDL_SCANCODE_INTERNATIONAL7,
		international8 = SDL_SCANCODE_INTERNATIONAL8,
		international9 = SDL_SCANCODE_INTERNATIONAL9,
		j = SDL_SCANCODE_J,
		k = SDL_SCANCODE_K,
		kbdillumdown = SDL_SCANCODE_KBDILLUMDOWN,
		kbdillumtoggle = SDL_SCANCODE_KBDILLUMTOGGLE,
		kbdillumup = SDL_SCANCODE_KBDILLUMUP,
		kp_0 = SDL_SCANCODE_KP_0,
		kp_00 = SDL_SCANCODE_KP_00,
		kp_000 = SDL_SCANCODE_KP_000,
		kp_1 = SDL_SCANCODE_KP_1,
		kp_2 = SDL_SCANCODE_KP_2,
		kp_3 = SDL_SCANCODE_KP_3,
		kp_4 = SDL_SCANCODE_KP_4,
		kp_5 = SDL_SCANCODE_KP_5,
		kp_6 = SDL_SCANCODE_KP_6,
		kp_7 = SDL_SCANCODE_KP_7,
		kp_8 = SDL_SCANCODE_KP_8,
		kp_9 = SDL_SCANCODE_KP_9,
		kp_a = SDL_SCANCODE_KP_A,
		kp_ampersand = SDL_SCANCODE_KP_AMPERSAND,
		kp_at = SDL_SCANCODE_KP_AT,
		kp_b = SDL_SCANCODE_KP_B,
		kp_backspace = SDL_SCANCODE_KP_BACKSPACE,
		kp_binary = SDL_SCANCODE_KP_BINARY,
		kp_c = SDL_SCANCODE_KP_C,
		kp_clear = SDL_SCANCODE_KP_CLEAR,
		kp_clearentry = SDL_SCANCODE_KP_CLEARENTRY,
		kp_colon = SDL_SCANCODE_KP_COLON,
		kp_comma = SDL_SCANCODE_KP_COMMA,
		kp_d = SDL_SCANCODE_KP_D,
		kp_dblampersand = SDL_SCANCODE_KP_DBLAMPERSAND,
		kp_dblverticalbar = SDL_SCANCODE_KP_DBLVERTICALBAR,
		kp_decimal = SDL_SCANCODE_KP_DECIMAL,
		kp_divide = SDL_SCANCODE_KP_DIVIDE,
		kp_e = SDL_SCANCODE_KP_E,
		kp_enter = SDL_SCANCODE_KP_ENTER,
		kp_equals = SDL_SCANCODE_KP_EQUALS,
		kp_equalsas400 = SDL_SCANCODE_KP_EQUALSAS400,
		kp_exclam = SDL_SCANCODE_KP_EXCLAM,
		kp_f = SDL_SCANCODE_KP_F,
		kp_greater = SDL_SCANCODE_KP_GREATER,
		kp_hash = SDL_SCANCODE_KP_HASH,
		kp_hexadecimal = SDL_SCANCODE_KP_HEXADECIMAL,
		kp_leftbrace = SDL_SCANCODE_KP_LEFTBRACE,
		kp_leftparen = SDL_SCANCODE_KP_LEFTPAREN,
		kp_less = SDL_SCANCODE_KP_LESS,
		kp_memadd = SDL_SCANCODE_KP_MEMADD,
		kp_memclear = SDL_SCANCODE_KP_MEMCLEAR,
		kp_memdivide = SDL_SCANCODE_KP_MEMDIVIDE,
		kp_memmultiply = SDL_SCANCODE_KP_MEMMULTIPLY,
		kp_memrecall = SDL_SCANCODE_KP_MEMRECALL,
		kp_memstore = SDL_SCANCODE_KP_MEMSTORE,
		kp_memsubtract = SDL_SCANCODE_KP_MEMSUBTRACT,
		kp_minus = SDL_SCANCODE_KP_MINUS,
		kp_multiply = SDL_SCANCODE_KP_MULTIPLY,
		kp_octal = SDL_SCANCODE_KP_OCTAL,
		kp_percent = SDL_SCANCODE_KP_PERCENT,
		kp_period = SDL_SCANCODE_KP_PERIOD,
		kp_plus = SDL_SCANCODE_KP_PLUS,
		kp_plusminus = SDL_SCANCODE_KP_PLUSMINUS,
		kp_power = SDL_SCANCODE_KP_POWER,
		kp_rightbrace = SDL_SCANCODE_KP_RIGHTBRACE,
		kp_rightparen = SDL_SCANCODE_KP_RIGHTPAREN,
		kp_space = SDL_SCANCODE_KP_SPACE,
		kp_tab = SDL_SCANCODE_KP_TAB,
		kp_verticalbar = SDL_SCANCODE_KP_VERTICALBAR,
		kp_xor = SDL_SCANCODE_KP_XOR,
		l = SDL_SCANCODE_L,
		lalt = SDL_SCANCODE_LALT,
		lang1 = SDL_SCANCODE_LANG1,
		lang2 = SDL_SCANCODE_LANG2,
		lang3 = SDL_SCANCODE_LANG3,
		lang4 = SDL_SCANCODE_LANG4,
		lang5 = SDL_SCANCODE_LANG5,
		lang6 = SDL_SCANCODE_LANG6,
		lang7 = SDL_SCANCODE_LANG7,
		lang8 = SDL_SCANCODE_LANG8,
		lang9 = SDL_SCANCODE_LANG9,
		lctrl = SDL_SCANCODE_LCTRL,
		left = SDL_SCANCODE_LEFT,
		leftbracket = SDL_SCANCODE_LEFTBRACKET,
		lgui = SDL_SCANCODE_LGUI,
		// well these don't exist... wiki lies!!
		// lockingcapslock = SDL_SCANCODE_LOCKINGCAPSLOCK,
		// lockingnumlock = SDL_SCANCODE_LOCKINGNUMLOCK,
		// lockingscrolllock = SDL_SCANCODE_LOCKINGSCROLLLOCK,
		lshift = SDL_SCANCODE_LSHIFT,
		m = SDL_SCANCODE_M,
		mail = SDL_SCANCODE_MAIL,
		mediaselect = SDL_SCANCODE_MEDIASELECT,
		menu = SDL_SCANCODE_MENU,
		minus = SDL_SCANCODE_MINUS,
		mode = SDL_SCANCODE_MODE,
		mute = SDL_SCANCODE_MUTE,
		n = SDL_SCANCODE_N,
		nonusbackslash = SDL_SCANCODE_NONUSBACKSLASH,
		nonushash = SDL_SCANCODE_NONUSHASH,
		numlockclear = SDL_SCANCODE_NUMLOCKCLEAR,
		o = SDL_SCANCODE_O,
		oper = SDL_SCANCODE_OPER,
		out = SDL_SCANCODE_OUT,
		p = SDL_SCANCODE_P,
		pagedown = SDL_SCANCODE_PAGEDOWN,
		pageup = SDL_SCANCODE_PAGEUP,
		paste = SDL_SCANCODE_PASTE,
		pause = SDL_SCANCODE_PAUSE,
		period = SDL_SCANCODE_PERIOD,
		power = SDL_SCANCODE_POWER,
		printscreen = SDL_SCANCODE_PRINTSCREEN,
		prior = SDL_SCANCODE_PRIOR,
		q = SDL_SCANCODE_Q,
		r = SDL_SCANCODE_R,
		ralt = SDL_SCANCODE_RALT,
		rctrl = SDL_SCANCODE_RCTRL,
		enter = SDL_SCANCODE_RETURN,
		return2 = SDL_SCANCODE_RETURN2,
		rgui = SDL_SCANCODE_RGUI,
		right = SDL_SCANCODE_RIGHT,
		rightbracket = SDL_SCANCODE_RIGHTBRACKET,
		rshift = SDL_SCANCODE_RSHIFT,
		s = SDL_SCANCODE_S,
		scrolllock = SDL_SCANCODE_SCROLLLOCK,
		select = SDL_SCANCODE_SELECT,
		semicolon = SDL_SCANCODE_SEMICOLON,
		separator = SDL_SCANCODE_SEPARATOR,
		slash = SDL_SCANCODE_SLASH,
		sleep = SDL_SCANCODE_SLEEP,
		space = SDL_SCANCODE_SPACE,
		stop = SDL_SCANCODE_STOP,
		sysreq = SDL_SCANCODE_SYSREQ,
		t = SDL_SCANCODE_T,
		tab = SDL_SCANCODE_TAB,
		thousandsseparator = SDL_SCANCODE_THOUSANDSSEPARATOR,
		u = SDL_SCANCODE_U,
		undo = SDL_SCANCODE_UNDO,
		unknown = SDL_SCANCODE_UNKNOWN,
		up = SDL_SCANCODE_UP,
		v = SDL_SCANCODE_V,
		volumedown = SDL_SCANCODE_VOLUMEDOWN,
		volumeup = SDL_SCANCODE_VOLUMEUP,
		w = SDL_SCANCODE_W,
		www = SDL_SCANCODE_WWW,
		x = SDL_SCANCODE_X,
		y = SDL_SCANCODE_Y,
		z = SDL_SCANCODE_Z,
	};

	scancode to_scancode(keycode) noexcept;
	keycode to_keycode(scancode) noexcept;

	bool pressed(scancode) noexcept;

} // namespace simple::interactive

#endif /* end of include guard */
